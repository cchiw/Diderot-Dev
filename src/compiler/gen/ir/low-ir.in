(* low-ir.sml
 *
 * This code is part of the Diderot Project (http://diderot-language.cs.uchicago.edu)
 *
 * COPYRIGHT (c) 2015 The University of Chicago
 * All rights reserved.
 *
 * Lower-level version of the Diderot CFG IR
 *
 * Note: this file is generated from gen/ir/low-ir.spec and gen/ir/low-ir.in.
 *)

structure LowOps =
  struct

  (* required helper functions for types *)
    type ty = LowTypes.ty
    val samety = LowTypes.same
    val hashty = LowTypes.hash
    val tyToString = LowTypes.toString

    type mesh = meshElem.mesh
    val samemesh = meshElem.sameMesh
    val hashmesh = meshElem.hashMesh
    val meshToString = meshElem.toStringMesh

    type element = meshElem.element
    val sameelement = meshElem.sameElement
    val hashelement = meshElem.hashElement
    val elementToString = meshElem.toStringElement

type fnspace = meshElem.fnspace
val samefnspace = meshElem.samefnspace
val hashfnspace= meshElem.hashfnspace
val fnspaceToString = meshElem.toStringfnspace


  (* required helper functions for type lists *)
    type tys = ty list
    fun sametys (tys1, tys2) = ListPair.allEq samety (tys1, tys2)
    fun hashtys tys = List.foldl (fn (ty, s) => hashty ty + 0w3 * s) 0w0 tys
    fun tysToString tys = String.concat["[", String.concatWithMap "," tyToString tys, "]" ]

  (* required helper functions for the int type *)
    fun sameint (i1 : int, i2) = (i1 = i2)
    fun hashint i = Word.fromInt i
    fun intToString i = Int.toString i

  (* required helper functions for the string type *)
    fun samestring (s1 : string, s2) = (s1 = s2)
    val hashstring = HashString.hashString
    fun stringToString s = String.concat["\"", s, "\""]

  (* required helper functions for the shape type *)
    type shape = TensorShape.t
    val sameshape = TensorShape.same
    val hashshape = TensorShape.hash
    val shapeToString = TensorShape.toString

  (* required helper functions for the index control type type *)
    type idxctl = IndexCtl.t
    val sameidxctl = IndexCtl.same
    val hashidxctl = IndexCtl.hash
    val idxctlToString = IndexCtl.toString

type intList = int list
fun sameintList(tys1, tys2) = ListPair.allEq sameint (tys1, tys2)
fun hashintList tys =  List.foldl (fn (ty, s) => hashint ty + 0w3 * s) 0w0 tys
fun intListToString  e = "int list"


type realList = real list
fun samereal(e1:real,e2:real)=  (abs(e1-e2)<0.001)
fun samerealList(tys1, tys2) = ListPair.allEq samereal (tys1, tys2)
fun hashrealList tys =  List.foldl (fn (ty, s) =>   0w3 * s) 0w0 tys
fun realListToString  e = "real list"

type stringList = string list
fun samestringList(tys1, tys2) = ListPair.allEq samestring (tys1, tys2)
fun hashstringList tys =  List.foldl (fn (ty, s) => hashstring ty + 0w3 * s) 0w0 tys
fun stringListToString e = "string list"

type stringLists = string list list
fun samestringLists(tys1, tys2) = ListPair.allEq samestringList (tys1, tys2)
fun hashstringLists tys = List.foldl (fn (ty, s) => hashstringList ty + 0w3 * s) 0w0 tys
fun stringListsToString e = "string list list "

@BODY@

  end

structure LowIR = SSAFn(
  val irName = "low-ir"
  structure Ty = LowTypes
  structure Op = LowOps)

structure LowCensus = CensusFn(LowIR)
